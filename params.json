{"name":"Json-routing","tagline":"nodeJs json configuration routing for express","body":"Express JSON Routes\r\n===================\r\nMake routes much easier to use in MVC format.\r\nI've been searching for a while for a nodejs routing solution with a:\r\n\r\n -  simple configuration,\r\n -  super performance,\r\n -  simple code,\r\n -  MVC organization,\r\n -  manage only routing, no other auto magic api creation\r\n -  customizable\r\n -  least possible dependency, which uses only underscore\r\n\r\nThis is: json-routes.\r\n\r\nHow It Works\r\n-------------\r\n\r\n**The basic concepts.**\r\nCreate a json file with your routing config and add code logic in a external file called *controller* , creating an MVC style structure.\r\n\r\nI followed the Expressjs 4 routing standards, helping the developer to manage the routes creation and project organization faster and in the standard synthax.\r\n\r\n\r\nProposed Structure\r\n-------------\r\nThis is an example of the default proposed structure, you can customize and change as you prefer.\r\n\r\n```\r\nproject root\r\n├── controllers/\r\n│   ├── IndexController.js\r\n│   ├── AuthController.js\r\n│   ├── UsersController.js\r\n├── policy/\r\n│   │   ├── AuthorizationPolicy.js\r\n│   │   ├── mymiddleware.js\r\n├── routes/\r\n│   │   │   ├── auth.json\r\n│   │   │   ├── users.json\r\n│   │   │   ├── index.json\r\n├── app.js/\r\n├── package.json/\r\n├── README.md/\r\n```\r\n- **Controller**: contains the code's logic\r\n- **Policy**: contains the function called before the controller = middleware\r\n- **Routes**: contains all the `*.json` routing configuration. You can create as many *.json files as you need. By default, all routes within a file look up the corresponding controller (= modules = controllers = middleware) inside the controller's default directory `./controller` (or within the directory specified by the user), which uses the following naming format: Route-name (without .json) + \"Controller.js (the first letter must be capitalized)\".\r\n\r\n> **EXAMPLE:**\r\n> If you have a definition file called `users.json`, by default the route searches the controller `UsersControllers.js`.\r\nFor routes *auth.json* all routes call the controller `AuthController.js` ecc.. ecc..\r\n\r\n\r\n\r\n> **NOTE:**  this is a proposed structure but you can configure the module for your structure, you can change dir structure or add all routes in a single file.\r\n\r\n\r\n### Creating JSON Configuration file\r\nThe routing file is encoded in the JSON format and by **default is in `./routes.`**\r\n\r\nRouter is created using this syntax:\r\n\r\n`\"RoutePath\" : {\"verb\": {options}`\r\n\r\n\r\n*Example of extended config*\r\n\r\n```javascript\r\n{\r\n   \"routePath\": {\r\n    \"VERB\": {\r\n      \"route\": \"controller:method\",\r\n      \"policy\": [\r\n        \"controller:method\",\r\n      ]\r\n    }\r\n  },\r\n\r\n  \"/admin\": {\r\n    \"GET\": {\r\n      \"route\": \"action\",\r\n      \"policy\": [\r\n        \"./demo/policycustom/test:check\",\r\n        \"test:all\",\r\n        \"subfolder/test2:index\"\r\n      ]\r\n    },\r\n    \"POST\": {\r\n      \"route\": \"index\",\r\n      \"policy\": [\r\n        \"./demo/policycustom/test:check\",\r\n        \"test:all\",\r\n        \"subfolder/test2:index\"\r\n      ]\r\n    }\r\n  },\r\n\r\n\r\n ...\r\n  more routes\r\n}\r\n```\r\n\r\n\r\n###RoutePath\r\nThis is the routing path and it follows the express4 standard routing. You can use jolly character and other type syntax `/admin*,` `/admin/:name` etc. etc.;\r\n\r\n\r\n###Verb\r\nRelates to the call verb and can assume any valid http verbs like GET, POST, PUT, DELETE etc etc. You can add more verbs for a single routePath:\r\n\r\n```javascript\r\n{\r\n\"/admin\": {\r\n    \"GET\": {\r\n      \"route\": \"action\",\r\n      \"policy\": [\r\n        \"./demo/policycustom/test:check\",\r\n        \"test:all\",\r\n        \"subfolder/test2:index\"\r\n      ]\r\n    },\r\n    \"POST\": {\r\n      \"route\": \"action\",\r\n      \"policy\": [\r\n        \"test:all\",\r\n      ]\r\n    }\r\n\r\n}\r\n```\r\n\r\n`/admin` has GET and POST  verbs.\r\n\r\n###Route\r\n\r\nRelates to `file:method` to call a route address.\r\n\r\nBy default, the routing search controller file inside the default controller directory is: `./controlles`, and you can change it using the global options explained in this document.\r\n\r\nIf the controller is not set, the routing will search a file called with the same name as the json file, with \"Controller\" as suffix.\r\n\r\n> **Example:**\r\n> If you have a definition file called `users.json`, by default the route searches the controller `UsersControllers.json`.\r\nFor routes *auth.json* all routes call the controller `AuthController.js` etc.. etc..\r\n\r\n\r\n**Summarize route params**\r\n\r\nIf you omit the route params, the system routing assumes you have a default route controller path/name and a method called \"index\".\r\n\r\nIf you add only a parameter, it assumes that the controller is in the default directory with standard name `nameController.js` , and the parameter is the method that should be called. example route: \"testall\"\r\n\r\nIf the route params contain both values `controllername:method` (user:index) it will search the controller using the default directory path structured as controller name followed by method. For example, route: \"user:index\" searches for a controller called user.js with method index.\r\n\r\nIf you **need to call a controller in a subfolder**, simply add the path before the controller name. Example route: \"/afolder/user:index\", fire ./controller/afolder/user.js with method index.\r\n\r\nIf you **need to call a controller starting to your project root** simply add `.` before the path. Example route: \"./lib/user:index\", fire  ./lib/user.js with method index.\r\n\r\n\r\n\r\n###Policy\r\n\r\nIs a module/function called before the controller (= middleware), by default it calls a file in ./policy named as you set in parameters \"fileName\" and a function named as you set in \"functionName\".\r\n\r\nExample: policy: \"auth/index\" calls ./policy/auth.js and method index\r\n\r\n**The syntax is the same as `route` params**\r\n\r\nIt can be a string for a single policy or an array for multiple policy files.\r\n\r\n\r\n\r\n\r\n###Regex\r\nYou can set a regex to validate your route, however I discourage using it. Instead, I prefer to add this logic in the controller for better code speed.\r\n```javascript\r\n{\r\n\"/admin\": {\r\n    \"GET\": {\r\n      \"route\": \"action\",\r\n      \"policy\": [\r\n        \"./demo/policycustom/test:check\",\r\n        \"test:all\",\r\n        \"subfolder/test2:index\"\r\n      ],\r\n      \"regex\" : true | false\r\n    }\r\n\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Init Module\r\n\r\nConfigure the routing modules in your main js file, as any other nodes modules.\r\n\r\n```javascript\r\n// Includes\r\nvar express     = require('express');\r\nvar app         = express();\r\nvar routes      = require('json-routing'); // add module\r\n\r\n...\r\n\r\n// your code..\r\napp.set(...);\r\napp.use(...);\r\n\r\n// this is the magic!\r\nroutes(app); //init modules\r\n\r\n```\r\n\r\n\r\nChange default Options\r\n-----------------\r\nWhen you initialize the module, you can specify a few options to customize the directory structure.\r\nAll are listed below with the default values.  An explanation follows.\r\n\r\nyour main.js file\r\n```javascript\r\n// Includes\r\nvar express     = require('express');\r\nvar app         = express();\r\nvar routes      = require('json-routing'); // add module\r\n\r\n// your code..\r\napp.set(...);\r\napp.use(...);\r\n\r\n//define routes default options\r\nvar routeOptions = {\r\n    routesPath      : \"./routes\",\r\n    controllerPath  : \"./controllers\",\r\n    policyPath      : \"./policy\",\r\n    cors            : false\r\n}\r\n\r\n//init routes\r\nroutes(app, routeOptions);\r\n```\r\n\r\n-  routesPath      : the path to your routes folder.\r\n-  controllerPath  : the path to your controller folder.\r\n-  policyPath      : the path to your policy folder.\r\n-  cors            : enable cross origin resource sharing for all routes. (more cors options coming soon..)\r\n\r\nChange json file Global Options\r\n-----------------\r\nIf you need to change options for all routes only for a specific *.json file, you can set in your file the key `GLOBAL` as in the following example:\r\n\r\nuser.json\r\n```javascript\r\n{\r\n  \"GLOBAL\": {\r\n    \"controllerPath\": \"./customdir\",\r\n    \"controller\": \"test\",\r\n    \"policyPath\":\"./lib\",\r\n    \"policy\":[\"config:setall\",\"config:connection\"],\r\n    \"baseUrl\":\"/user\"\r\n  },\r\n   \"/create\": {\r\n    \"PUT\": {\r\n      \"route\": \"index\",\r\n      \"policy\": [\r\n        \"auth:check\",\r\n        \"auth:adduserparams\"\r\n      ]\r\n    }\r\n  }\r\n\r\n}\r\n```\r\nExample: route controller is ./customdir/UserController.js\r\n\r\n- controllerPath: set a controller path for all routing file\r\n- controller: set a custom name controller for all routing file\r\n- policyPath: set a custom base policy dir for all rout\r\n- policy: is an array of policy `file:action` to fire before controller\r\n- baseUrl: is a base path for all url routes in file. Example, inside a file all routes start with `/api/*`, i can set base url as `/api`. Now all file routes start with `/api`. If i have a routes `/users`, it fired when user called `/api/users`\r\n\r\n> **NOTE:**  the key \"GLOBAL\" must be uppercase.\r\n\r\n\r\n\r\nFull extended example\r\n-----------------\r\n\r\n*app.js*\r\n```javascript\r\nvar express = require('express')\r\n    , app = express()\r\n    , port = process.env.PORT || 3000\r\n    , routing = require('./lib/route');\r\n\r\n/**\r\n * global options for routing\r\n *\r\n * set all file inside /api/* for a more cleaner code\r\n */\r\nvar routeOptions = {\r\n    routesPath: \"./api/routes\"\r\n    , controllersPath: \"./api/controllers\"\r\n    , policyPath: './api/policy'\r\n};\r\n\r\n/**\r\n * init json-routing\r\n */\r\nrouting(app, routeOptions);\r\n\r\n/**\r\n * standard express 4 routing\r\n * yes.. you can use both routing together if you need\r\n */\r\nvar router = express.Router();\r\nrouter.get('/express/', function (req, res) {\r\n    res.send(' this is a standard routing ');\r\n});\r\napp.use('/', router);\r\n\r\n/**\r\n * server start\r\n *\r\n * @type {http.Server}\r\n */\r\nvar server = app.listen(port, function () {\r\n    console.log('Listening on port %d', server.address().port);\r\n});\r\n```\r\nThis is the main file, we set routing and add global setting to use ./api as root directory\r\n\r\n\r\n\r\n*./api/routes/users.json*\r\n```javascript\r\n{\r\n   \"/banned\": {\r\n    \"GET\": {\r\n      \"route\": \"bannedCustom:index\",\r\n      }\r\n  },\r\n   \"/user\": {\r\n    \"GET\": {\r\n      \"route\": \"find\",\r\n      \"policy\": [\r\n        \"auth:check\",\r\n        \"auth:adduserparams\"\r\n      ]\r\n    },\r\n     \"PUT\": {\r\n      \"route\": \"create\",\r\n      \"policy\": [\r\n        \"auth:check\",\r\n      ]\r\n    }\r\n  }\r\n\r\n}\r\n```\r\ndefine the routes\r\n\r\n\r\n*./api/controllers/UsersController.js*\r\n```javascript\r\nexports.index = function(req,res,next) {\r\n    res.send(' index routes ');\r\n};\r\n\r\nexports.create = function(req,res,next) {\r\n    res.send(' create routes params:'+req.params.name);\r\n};\r\n```\r\na basic controller logic\r\n\r\n*./api/controllers/bannedCustom.js*\r\n```javascript\r\nexports.getbanned = function(req,res,next) {\r\n    res.send(' custom controller name ');\r\n};\r\n```\r\nthis is the controller with custom name\r\n\r\n\r\n*./api/policy/auth.js*\r\n```javascript\r\nexports.check = function(req,res,next) {\r\n    if (!req.session.isLogged){\r\n\t     return  res.redirect('http://'+req.hostname+\":3000/403\");\r\n    }\r\n    next();\r\n};\r\n```\r\nLet me explain this policy: it checks if a user is logged, else set a redirect, so we can use the middleware to check ACL, authorization or get/set global vars, and this is very useful.\r\n\r\n\r\n\r\n\r\n\r\nCreate a Policy File and Pass vars to controller\r\n-----------------\r\nWe encourage to use standard tecnique for best performance: use middleware.\r\nusing the full example described below we can create a standard policy file to attach a global var using `req`\r\n\r\n*./api/policy/auth.js*\r\n```javascript\r\nexports.getbanned = function(req,res,next) {\r\n    if (!req.session.isLogged){\r\n\t     return  res.redirect('http://'+req.hostname+\":3000/403\");\r\n    }\r\n    //use req\r\n    req.session.lastPing = new Date();\r\n    next();\r\n};\r\n```\r\n\r\n\r\n**Read the value in the controller or policy**\r\n\r\n*./api/controllers/bannedCustom.js*\r\n```javascript\r\nexports.getbanned = function(req,res,next) {\r\n    res.send(' custom controller name, middleware loaded at: '+req.session.lastPing);\r\n};\r\n```\r\n\r\nCase: using middleware\r\n-----------------\r\n\r\nA special case: if we want to add an authentication before some route, take a look at this example:\r\n\r\n```javascript\r\n{\r\n\r\n \"/admin*\": {\r\n    \"GET\": {\r\n      \"route\": \"./policy/auth:check\",\r\n     },\r\n    \"POST\": {\r\n      \"route\": \"auth:check\",\r\n     },\r\n    \"PUT\": {\r\n      \"route\": \"auth:check\",\r\n     },\r\n    \"DELETE\": {\r\n      \"route\": \"auth:check\",\r\n    },\r\n  },\r\n\r\n   \"/admin/dashboard\": {\r\n    \"GET\": {\r\n      \"route\": \"item:get,\r\n      }\r\n  },\r\n   \"/admin/user\r\n   \": {\r\n    \"GET\": {\r\n      \"route\": \"find\",\r\n    },\r\n     \"PUT\": {\r\n      \"route\": \"create\",\r\n    }\r\n  }\r\n\r\n}}\r\n```\r\nAll `admin*` route calls the controller `auth`, so now `auth:check` is executed before all `admin*` controller and it becomes\r\n a policy (=middleware) and for a clear structure i put the file in policy dir.\r\n\r\n\r\nAn alternative example use the global file option:\r\n\r\n```javascript\r\n{\r\n \"GLOBAL\": {\r\n    \"policy\":[\"auth:check\"],\r\n    \"baseUrl\":\"/admin\"\r\n  },\r\n  \r\n   \"/dashboard\": {\r\n    \"GET\": {\r\n      \"route\": \"item:get,\r\n      }\r\n  },\r\n   \"/user\r\n   \": {\r\n    \"GET\": {\r\n      \"route\": \"find\",\r\n    },\r\n     \"PUT\": {\r\n      \"route\": \"create\",\r\n    }\r\n  }\r\n\r\n}}\r\n```\r\nChangelog 0.24\r\n-------------\r\n- initial CORS support (look at \"Change default Options\"), more CORS options coming soon...\r\n\r\nChangelog 0.23\r\n-------------\r\n- fix url union in windows platform\r\n\r\nChangelog 0.20\r\n-------------\r\n- fix policy string is not added if global policy is set\r\n- working test\r\n\r\nChangelog 0.19\r\n-------------\r\n- add Global base Url\r\n\r\nChangelog 0.17\r\n-------------\r\n- fix default route\r\n- add mre error check\r\n\r\nChangelog 0.15\r\n-------------\r\n- add goblal file policy (=middleware)\r\n\r\nChangelog from version 0.13\r\n-------------\r\n- No longer compatible with <0.13 version\r\n- new json syntax","google":"UA-58576055-1","note":"Don't delete this file! It's used internally to help with page regeneration."}